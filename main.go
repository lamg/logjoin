// Watches the changes in two log files generated by a proxy
// server and uses that information for generating a file with
// Common Log Format.
package main

import (
	"flag"
	"github.com/hpcloud/tail"
	"log"
	"unicode"
)

func main() {
	var lgn, dwn, out string
	flag.StringVar(&lgn, "f", "", "Logins log")
	flag.StringVar(&dwn, "d", "", "Downloads log")
	flag.StringVar(&out, "o", "", "Output log")
	var lgiTl, dwnTl *tail.Tail
	var e error
	lgiTl, e = tail.TailFile(lgn, tail.Config{Follow: true})
	if e == nil {
		dwnTl, e = tail.TailFile(dwn, tail.Config{Follow: true})
	}
	if e == nil {
		e = logLns(lgiTl.Lines, dwnTl.Lines, out)
	}
	if e != nil {
		log.Fatal(e.Error())
	}
}

func logLns(l, d chan *tail.Line, o string) (e error) {
	var oc chan<- string
	oc = joinLns(l, d)
	var f io.Writer
	f, e = os.Create(o)
	for e == nil {
		var s string
		s = <-oc
		_, e = f.Write([]byte(s))
	}
	return
}

func joinLns(l, d chan *tail.Line) (o chan string) {
	// { l contains lines with users associated to IP addresses
	//   and d contains lines with IP addresses associated to
	//   download requests }
	// { o contains lines with users associated to IP addresses
	//   and download requests }
	var lgi map[string]*LLn
	lgi = make(map[string]*LLn)
	for {
		var ll, dl *tail.Line
		ll, dl = <-l, <-d
		var lr *LLn
		var e error
		lr, e = parseLogins(ll.Text)
		if e == nil && lr.Login {
			lgi[lr.IP] = lr
		} else if e == nil && lr.Logout {
			delete(lgi[lr.IP])
		}
		// { login info updated ≡ e = nil }
		var dr *DLn
		var ok bool
		dr, e = parseDownloads(dl.Text)
		if _, ok = lgi[dr.IP]; e == nil && ok {
			// { user of dr founded }
			var s string
			s = toString(dr, lgi[dr.IP])
			o <- s
			// { line created and sent to channel o }
		}
	}
}

type LLn struct {
	Action, IP, User string
}

//TODO
// { l has format:
//  log = month day time host pid zone action user cs ip.
//  month = word.
//  day = number.
//  time = number colon number colon number
//  host = word.
//  pid = word "[" number "]" colon.
//  zone = "Zone" colon word "-".
//  action = word [word] colon.
//  user = word comma comma.
//  ip = number dot number dot number dot number.
func parseLogins(l string) (r *LLn, e error) {
	var i int
	i = 0
	if e == nil {
		i, e = skipWord(l, i)
	}
	// { month skipped ≡ e = nil }
	if e == nil {
		i, e = skipNumber(l, i)
	}
	// { day skipped ≡ e = nil }
	if e == nil {
		i, e = skipNumber(l, i)
	}
	if e == nil {
		i, e = skipChar(l, i, ":")
	}
	if e == nil {
		i, e = skipNumber(l, i)
	}
	if e == nil {
		i, e = skipChar(l, i, ':')
	}
	if e == nil {
		i, e = skipNumber(l, i)
	}
	// { time skipped ≡ e = nil }
	if e == nil {
		i, e = skipWord(l, i)
	}
	// { host skipped ≡ e = nil }
	if e == nil {
		i, e = skipWord(l, i)
	}
	if e == nil {
		i, e = skipChar(l, i, '[')
	}
	if e == nil {
		i, e = skipNumber(l, i)
	}
	if e == nil {
		i, e = skipChar(l, i, ']')
	}
	if e == nil {
		i, e = skipChar(l, i, ':')
	}
	if e == nil {
		i, e = skipWord(l, i)
	}
	if e == nil {
		i, e = skipChar(l, i, ':')
	}
	if e == nil {
		i, e = skipWord(l, i)
	}
	if e == nil {
		i, e = skipChar(l, i, '-')
	}
	// { zone skipped ≡ e = nil }
	var k int
	if e == nil {
		k, e = getAction(l, i)
	}
	if e == nil {
		r = &LLn{Action: l[i:k]}
		i = k
		k, e = getWord(l, i)
	}
	// { got user ≡ e = nil }
	if e == nil {
		r.User = l[i:k]
		i = k
		k, e = skipChar(l, i, ',')
	}
	if e == nil {
		i = k
		k, e = skipChar(l, i, ',')
	}
	// { ", ," skipped ≡ e = nil }
	if e == nil {
		i = k
		k, e = getIP(l, i)
	}
	// { got IP ≡ e = nil }
	if e == nil {
		r.IP = s[i:k]
	}
	return
}

func getAction(s string, i int) (k int, e error) {
	k, e = skipWord(s, i)
	if e == nil {
		i = k
		k, e = skipChar(s, i, ':')
	}
	if e != nil {
		i = k
		k, e = skipWord(s, i)
		if e == nil {
			k, e = skipChar(s, i, ':')
		}
	}
	return
}

func skipChar(s string, i int, c rune) (r int, e error) {
	if s[i] == c {
		r = i + 1
	} else {
		e = fmt.Errorf("Expected char %c at %d in %s", c, i, s)
	}
	r = skipSpaces(s, r)
	return
}

func skipNumber(l string, i int) (r int, e error) {
	for i != len(s) && unicode.IsDigit(i) {
		i = i + 1
	}
	r = skipSpaces(s, i)
	if r == i {
		e = fmt.Errorf("Error in %s at %d", l, i)
	}
	return
}

// { 0 ≤ i < len(s) }
// { r = index of char seq followed by (letter seq followed by
//   space seq) }
func skipWord(s string, i int) (r int, e error) {
	r = i
	for r != len(s) && (unicode.IsLetter(s[i]) || s[r] == '-' || s[r] == '_') {
		r = r + 1
	}
	if r == i {
		e = fmt.Errorf("Expected letter at %d in %s", i, s)
	} else {
		r = skipSpaces(s, r)
	}
	return
}

func skipSpaces(s string, i int) (r int) {
	for i != len(s) && unicode.IsSpace(s[i]) {
		i = i + 1
	}
	r = i
	return
}

func parseDownloads(l string) (r *DLn, e error) {

	return
}

func toString(d *DLn, l *LLn) (r string) {
	return
}
